# -*- coding: utf-8 -*-
"""blood_donation_analysis.py

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Mbmr2_RAgc0Iz2rBXCU4SJLy3a0z_wNb
"""

# Commented out IPython magic to ensure Python compatibility.
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
# %matplotlib inline

from sklearn.model_selection import train_test_split
from sklearn.metrics import confusion_matrix,accuracy_score,roc_auc_score

import warnings
warnings.simplefilter('ignore')

from sklearn.ensemble import RandomForestClassifier
from sklearn.linear_model import LogisticRegression
from sklearn.tree import DecisionTreeClassifier
from sklearn.neural_network import MLPClassifier
from sklearn.svm import SVC

from google.colab import files
uploaded = files.upload()

test = pd.read_csv('blood-test.csv')

from google.colab import files
uploaded = files.upload()

train = pd.read_csv('blood-train.csv')

print('train_shape ',train.shape)
print('test ',test.shape)

train.head()

train['Made Donation in March 2007'].value_counts()

Y=train.iloc[:,-1]
Y.head()

old_train=train
train=train.iloc[:,1:5]
test=test.iloc[:,1:5]

train.head()

df=pd.merge(train,test)

df.head()

X=df.iloc[:,:]
X.head()

train.describe()

plt.figure(figsize=(20,10))
sns.boxplot(y="Months since Last Donation",data=old_train)

corrmat=X.corr()
f,ax = plt.subplots(figsize =(9,8))
sns.heatmap(corrmat, ax = ax, cmap = "YlGnBu" , linewidths = 0.1,fmt = ".2f",annot=True)

train["Months since Last Donation"].unique()

X["Donation for"] = (X["Months since First Donation"] - X["Months since Last Donation"] )

X.head()

corrmat=X.corr()
f,ax = plt.subplots(figsize =(9,8))
sns.heatmap(corrmat, ax = ax, cmap = "YlGnBu" , linewidths = 0.1,fmt = ".2f",annot=True)

X.drop(["Total Volume Donated (c.c.)"], axis=1, inplace=True)

X.head()

X.shape

# standard scalar changes the distribution in such way that they are not close to zero
from sklearn.preprocessing import StandardScaler
scale=StandardScaler()

X=scale.fit_transform(X)

train=X[:576]

train.shape

text = X[576:]

Y=Y[:576]

Y.shape

# model builddddinggg

xtrain ,xtest ,ytrain ,ytest = train_test_split(train,Y,test_size=0.2,random_state=0)

# Logistic regression
logreg = LogisticRegression(random_state=7)
logreg.fit(xtrain,ytrain)

pred = logreg.predict(xtest)

accuracy_score(pred,ytest )

roc_auc_score(pred,ytest)

#svc classifier
SVMC = SVC(probability=True)

SVMC.fit(train,Y)



pred = SVMC.predict(xtest)

accuracy_score(pred,ytest )

confusion_matrix(pred,ytest)

roc_auc_score(pred,ytest)

# Random forest
RFC = RandomForestClassifier()
RFC.fit(xtrain,ytrain)

pred=RFC.predict(xtest)

confusion_matrix(pred,ytest)

accuracy_score(pred,ytest )

roc_auc_score(pred,ytest)





# Decisipn tree

model=DecisionTreeClassifier(max_leaf_nodes=4,max_features=3,max_depth=15)

model.fit(xtrain,ytrain)

pred=model.predict(xtest)

confusion_matrix(pred,ytest)

accuracy_score(pred,ytest )

confusion_matrix(pred,ytest)

roc_auc_score(pred,ytest)

# MLP classifier

clf_neutral = MLPClassifier(solver='lbfgs', alpha=1e-5, hidden_layer_sizes=(25,),random_state=1)
 clf_neutral.fit(train, Y)

print('predicting ...   \nIn Test Data')

predicted = clf_neutral.predict(xtest)

confusion_matrix(predicted,ytest)

roc_auc_score(pred,ytest)

accuracy_score(pred,ytest )